#!/usr/bin/env python3

import json
from typing import Dict
import zipfile
import argparse
import sys
import pathlib

SCRIPT_DIR = pathlib.Path(__file__).resolve().parent

KEY_ORDER = ['A', 'F', 'B', 'C', 'D', 'E', 'H', 'L', 'SP', 'PC', 'PCMEM']
# The number of characters in a single line
LINE_LENGTH= 73

RED = u"\u001b[31m"
GREEN = u"\u001b[32m"
RESET = u"\u001b[0m"

ERROR_MESSAGE = "============== ERROR =============="
SUCCESS_MESSAGE = "============== SUCCESS =============="

FLAGS = ["C", "H", "N", "Z"]

INITIAL_STATE = {
    "A": "01",
    "F": "CH-Z",
    "B": "00",
    "C": "13",
    "D": "00",
    "E": "D8",
    "H": "01",
    "L": "4D",
    "SP": "FFFE",
    "PC": "0100",
}


def unzip(rom_type, rom_n):

    zip_path = SCRIPT_DIR / "truth" / "zipped" / rom_type / f"{rom_n}.zip"
    unzip_dir = SCRIPT_DIR / "truth" / "unzipped" / rom_type
    dest = unzip_dir / f"{rom_n}.log"
    unzip_dir.mkdir(parents=True, exist_ok=True)

    with zipfile.ZipFile(zip_path, 'r') as zf:
        size = sum([info.file_size for info in zf.infolist()])
        if dest.is_file() and dest.stat().st_size == size:
            return

        zf.extractall(unzip_dir)


def parse_line(line:str, display_flags:bool=True) -> Dict[str, str]:
    data = {}
    kvs = line.split(" ")
    for kv in kvs:
        k, v = kv.split(":")

        if not(k in KEY_ORDER):
            raise f"Unexpected key {k}"

        if display_flags and k == "F":
            s = list(reversed('{0:08b}'.format(int(v,16))))
            v = ''
            for i in range(4,8):
                if s[i] == '1':
                    v += FLAGS[i-4]
                else:
                    v += '-'
        data[k] = v

    return data


def format_line_from_data(data, differing_keys, color_red):
    if color_red:
        col_start = RED
    else:
        col_start = GREEN

    pairs = []
    for k in KEY_ORDER:
        if k not in data:
            continue
        pair = f"{k}:{data[k]}"
        if k in differing_keys:
            pair = f"{col_start}{pair}{RESET}"

        pairs.append(pair)

    return " ".join(pairs)


def format_line(line, differing_keys, color_red):
    display_flags = True
    if "F-LOW" in differing_keys:
        display_flags = False
    data = parse_line(line, display_flags)
    return format_line_from_data(data, differing_keys, color_red)


with (SCRIPT_DIR / "opcode_annotations.json").open() as f:
    opcode_annotations = json.load(f)


def operation(line):
    """
    Returns a 2-element list of the CB opcode annotation and the following opcode annotation if next
    op is CB, and a 1-element list of just the next opcode annotation otherwise.
    """
    data = parse_line(line, True)
    pcmem = data["PCMEM"].split(",")

    opcode = pcmem[0].lower()
    op = [opcode_annotations["unprefixed"][f"0x{opcode}"]]

    if opcode == 'cb':
        next_opcode = pcmem[1].lower()
        next_op = opcode_annotations["cbprefixed"][f"0x{next_opcode}"]

        op.append(next_op)

    return op


def op_sig(op):
    chunks = [
        op['addr'].upper().replace('X', 'x'),
        op['mnemonic'],
    ]
    if 'operand1' in op:
        chunks.append(op['operand1'])
    if 'operand2' in op:
        chunks.append(op['operand2'])

    return ' '.join(chunks)

def detect_encoding(file_path:str) -> str:
    """
    Detects the encoding of the file using either BOMs or 0 chars values (incoherent in ASCII).
    Encoding can be :
    - "utf-8-sig" (File may have BOM)
    - "utf-16" (File has BOM)
    - "utf-16le" (File does not have BOM)
    - "utf-16be" (File does not have BOM)
    """
    with open(file_path, "rb") as f:
        chars = f.read(4)
        if chars[0] == 0xFF and chars[1] == 0xFE:
            # Little endian BOM, bom is automatically discarded
            return "utf-16"
        elif chars[0] == 0xFE and chars[1] == 0xFF:
            # Big endian BOM, bom is automatically discarded
            return "utf-16"
        elif chars[0] == 0xEF and chars[1] == 0xBB and chars[3] == 0xBF:
            # UTF-8 BOM, bom is automatically discarded
            return "utf-8-sig"
        elif chars[0] != 0 and chars[1] == 0:
            # Text is supposed to be ASCII, this 0 byte is the MSB of a char
            return "utf-16be"
        elif chars[0] == 0 and chars[1] != 0:
            # Text is supposed to be ASCII, this 0 byte is the MSB of a char
            return "utf-16le"
        else:
            return "utf-8-sig"

def get_input(file_path):
    if file_path == '-':
        return sys.stdin
    else:
        encoding = detect_encoding(file_path)
        return open(file_path, "r", encoding=encoding)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
                    prog = './gameboy-doctor',
                    description = 'TODO',
                    epilog = 'TODO')

    parser.add_argument('file', help='Path to log file or "-" to read from stdin')
    parser.add_argument('rom_type', choices=['cpu_instrs'], help='the type of ROM being checked')
    parser.add_argument('rom_number', type=int, help='the ROM number being checked')

    args = parser.parse_args()

    input_fpath = args.file
    rom_type = args.rom_type
    rom_n = args.rom_number

    f_input = get_input(input_fpath)

    unzip(rom_type, rom_n)

    truth_fpath = SCRIPT_DIR / "truth" / "unzipped" / rom_type / f"{rom_n}.log"


    with truth_fpath.open() as f_truth:
        line_n = 0

        prev_truth = ""
        while True:
            line_input = f_input.readline().strip()[:LINE_LENGTH]
            line_truth = f_truth.readline().strip()

            if line_truth == "":
                output = SUCCESS_MESSAGE
                output += "\n"
                output += f"\nYour logs matched mine for all {line_n} lines - you passed the test ROM!"
                output += "\n"

                print(output)

                sys.exit(0)

            if len(line_input) == 0 and len(line_truth) > 0:
                output = ERROR_MESSAGE
                output += f"\n\nYour logs matched mine for the last {line_n} lines, but then it ended while mine still has more lines to go. This means that you ended your log collection from your emulator too soon.\n\nRerun your emulator and recapture your logs, but don't stop it until you see the word \"Passed\" printed to the screen or sent to your serial port."
                print(output)
                sys.exit(1)

            line_n += 1

            if line_n == 1:
                try:
                    input_parsed = parse_line(line_input)
                except:
                    output = f"Line {line_n} cannot be parsed, please fix it.\n"
                    output += "\n"
                    output += "YOURS:\t" + line_input
                    sys.stderr.write(output)
                    sys.exit(1)
                differing_keys = []
                for k in KEY_ORDER:
                    if k == "PCMEM":
                        continue
                    if input_parsed[k].lower() != INITIAL_STATE[k].lower():
                        differing_keys.append(k)

                if len(differing_keys) > 0:
                    t = format_line_from_data(INITIAL_STATE, differing_keys, False)
                    i = format_line(line_input, differing_keys, True)

                    output = ERROR_MESSAGE
                    output += f"\n\nYour CPU is not initialized to the state it should have immediately after executing the Boot ROM. Please set its registers to the values below:"
                    output += "\n"
                    output += "\nMINE:\t" + t + "\n" + "YOURS:\t" + i
                    print(output)

                    sys.exit(1)

            if line_input.lower() != line_truth.lower():
                try:
                    input_parsed = parse_line(line_input, False)
                except:
                    output = f"Line {line_n + 1} cannot be parsed, please fix it.\n"
                    output += "\n"
                    output += "YOURS:\t" + line_input
                    sys.stderr.write(output)
                    sys.exit(1)
                truth_parsed = parse_line(line_truth, False)

                differing_keys = []
                for k in KEY_ORDER:
                    if k == "F":
                        if input_parsed[k].lower() != truth_parsed[k].lower():
                            differing_keys.append(k)
                            input_low = input_parsed[k][1:2]
                            truth_low = truth_parsed[k][1:2]
                            if input_low != truth_low:
                                differing_keys.append(k + "-LOW")
                        continue
                    if input_parsed[k].lower() != truth_parsed[k].lower():
                        differing_keys.append(k)

                t = format_line(line_truth, differing_keys, False)
                i = format_line(line_input, differing_keys, True)

                output = ERROR_MESSAGE
                output += f"\n\nMismatch in CPU state at line {line_n}:"
                output += "\n"
                output += "\nMINE:\t" + t + "\n" + "YOURS:\t" + i
                output += "\n"

                if input_parsed['PC'].lower() == truth_parsed['PC'].lower() and input_parsed['PCMEM'].lower() != truth_parsed['PCMEM'].lower():
                    output += "\nOur values for PC are the same, but the memory at the location of PC is different. Perhaps you told me to check the wrong ROM type or number? Or, perhaps your CPU is not writing to the memory bank accurately?"
                elif len(prev_truth) > 0:
                    prev_op = operation(prev_truth)

                    output += f"\nThe CPU state before this (at line {line_n-1}) was:"
                    output += "\n"
                    output += "\n\t" + prev_truth
                    output += "\n"
                    output += f"\nThe last operation executed (in between lines {line_n-1} and {line_n}) was:"
                    output += "\n"
                    output += f"\n\t{op_sig(prev_op[0])}"
                    if len(prev_op) == 2:
                        output += f" -> {op_sig(prev_op[1])}"
                    output += "\n"
                    output += "\nPerhaps the problem is with this opcode, or with your interrupt handling?"

                output += "\n"

                print(output)
                sys.exit(1)

            prev_truth = line_truth

